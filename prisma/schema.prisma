// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums tidak diubah
enum Role {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ProgressStage {
  REVIEW
  INPROGRESS
  COMPLETED
}

model user {
  user_id      Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  firstname    String
  lastname     String?
  username     String   @unique
  phone_number String
  points        Int      @default(0)
  role         Role     @default(USER)
  signature    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  address         address?
  reports         report[]          @relation("UserReports")
  verifiedReports report[]          @relation("VerifierReports")
  likes           like[]            @relation("UserLikes")
  comments        comment[]         @relation("UserComments")
  reviews         report_progress[]
  refreshTokens   refresh_token[]

  @@index([email])
}

model refresh_token {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  user_id   Int
  user      user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([token(length: 255)])
  @@index([user_id])
}

model report {
  report_id           Int                @id @default(autoincrement())
  title               String
  description         String             @db.Text
  photoUrl            String
  verification_status VerificationStatus @default(PENDING)
  verification_notes  String?            @db.Text
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  address address?

  author    user @relation("UserReports", fields: [author_id], references: [user_id])
  author_id Int

  verifier    user? @relation("VerifierReports", fields: [verifier_id], references: [user_id])
  verifier_id Int?

  likes       like[] @relation("ReportLikes")
  comments    comment[] @relation("ReportComments")
  progressUpdates report_progress[]

  likesCount Int @default(0)

  @@index([author_id])
  @@index([verifier_id])
}

model address {
  address_id Int      @id @default(autoincrement())
  street     String   @db.Text
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  province    province @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  province_id Int
  regency     regency  @relation(fields: [regency_id], references: [regency_id], onDelete: Cascade)
  regency_id  Int

  user      user?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id   Int?    @unique
  report    report? @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
  report_id Int?    @unique

  @@index([province_id])
  @@index([regency_id])
}

model report_progress {
  report_progress_id Int           @id @default(autoincrement())
  photo_url          String
  progress_notes     String        @db.Text
  stage              ProgressStage @default(REVIEW)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  reviewer    user @relation(fields: [reviewer_id], references: [user_id])
  reviewer_id Int

  report    report @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
  report_id Int

  @@index([reviewer_id])
  @@index([report_id])
}

model province {
  province_id Int    @id @default(autoincrement())
  name        String @unique

  regencies regency[]
  addresses address[]
}

model regency {
  regency_id Int    @id @default(autoincrement())
  name       String

  province    province @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  province_id Int

  addresses address[]

  @@index([province_id])
}

model like {
  like_id        Int      @id @default(autoincrement())

  user   user   @relation("UserLikes", fields: [user_id], references: [user_id], onDelete: Cascade)
  report report @relation("ReportLikes", fields: [report_id], references: [report_id], onDelete: Cascade)
  user_id   Int
  report_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, report_id])
  @@index([user_id])
  @@index([report_id])
}

model comment {
  comment_id Int      @id @default(autoincrement())
  content    String   @db.Text

  user   user   @relation("UserComments", fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id Int

  report report @relation("ReportComments", fields: [report_id], references: [report_id], onDelete: Cascade)
  report_id Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([user_id, report_id])
  @@index([user_id])
  @@index([report_id])
}

