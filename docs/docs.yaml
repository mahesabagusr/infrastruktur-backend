openapi: 3.0.3
info:
  title: JagaKota API
  description: API untuk otentikasi pengguna, data lokasi (provinsi/kabupaten), dan laporan. (Tanpa Article)
  version: 2.1.1
servers:
  - url: /
    description: Development server

tags:
  - name: Auth
    description: Registrasi, login, logout, refresh token
  - name: User
    description: Profil pengguna publik/privat
  - name: Location
    description: Data provinsi dan kabupaten/kota
  - name: Report
    description: Laporan dan progres

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SuccessResponse:
      type: object
      properties:
        status: { type: string, example: success }
        message: { type: string, example: OK }
        data: { nullable: true }
    ErrorResponse:
      type: object
      properties:
        status: { type: string, example: fail }
        message: { type: string, example: Terjadi kesalahan }
        data:
          type: object
          properties:
            err: { type: string }
            data: { nullable: true, example: null }
    PaginationMeta:
      type: object
      properties:
        page: { type: integer, example: 1 }
        limit: { type: integer, example: 10 }
        total: { type: integer, example: 100 }
        totalPages: { type: integer, example: 10 }

    Province:
      type: object
      properties:
        province_id: { type: integer, example: 11 }
        name: { type: string, example: ACEH }
    Regency:
      type: object
      properties:
        regency_id: { type: integer, example: 1101 }
        province_id: { type: integer, example: 11 }
        name: { type: string, example: KABUPATEN SIMEULUE }

    Address:
      type: object
      properties:
        street: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        province: { $ref: '#/components/schemas/Province' }
        regency: { $ref: '#/components/schemas/Regency' }

    ReportCreateInput:
      type: object
      required: [title, description, latitude, longitude, street, provinceId, regencyId, photo]
      properties:
        title: { type: string }
        description: { type: string }
        latitude: { type: number, format: double }
        longitude: { type: number, format: double }
        street: { type: string }
        provinceId: { type: integer }
        regencyId: { type: integer }
        photo: { type: string, format: binary, description: Satu file gambar }

    VerifyReportInput:
      type: object
      required: [verificationStatus]
      properties:
        verificationStatus:
          type: string
          enum: [PENDING, VERIFIED, REJECTED]
        verificationNotes: { type: string, nullable: true }

    ReportProgressInput:
      type: object
      required: [progressNotes, image]
      properties:
        progressNotes: { type: string }
        stage:
          type: string
          enum: [REVIEW, INPROGRESS, COMPLETED]
          default: REVIEW
        image: { type: string, format: binary }

    ReportListItem:
      type: object
      properties:
        report_id: { type: integer }
        title: { type: string }
        description: { type: string }
        photoUrl: { type: string, format: uri }
        verification_status:
          type: string
          enum: [PENDING, VERIFIED, REJECTED]
        verification_notes: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        author:
          type: object
          properties:
            username: { type: string }
        address: { $ref: '#/components/schemas/Address' }
        _count:
          type: object
          properties:
            progressUpdates: { type: integer }

    ReportDetail:
      allOf:
        - $ref: '#/components/schemas/ReportListItem'
        - type: object
          properties:
            progressUpdates:
              type: array
              items:
                type: object
                properties:
                  report_progress_id: { type: integer }
                  progress_notes: { type: string }
                  stage:
                    type: string
                    enum: [REVIEW, INPROGRESS, COMPLETED]
                  photo_url: { type: string, format: uri }
                  createdAt: { type: string, format: date-time }

paths:
  /user/register:
    post:
      tags: [Auth]
      summary: Registrasi pengguna baru
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserRegisterInput' }
      responses:
        '201': { description: Berhasil, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '409': { description: Conflict, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '422': { description: Invalid payload, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /user/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserLoginInput' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Not Found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /user/refreshToken:
    post:
      tags: [Auth]
      summary: Refresh access token
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '401': { description: Unauthorized }
  /user/logout:
    post:
      tags: [Auth]
      summary: Logout
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }

  /user/{userId}:
    get:
      tags: [User]
      summary: Dapatkan user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '404': { description: Tidak ditemukan }

  /provinces:
    get:
      tags: [Location]
      summary: Semua provinsi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Province' }
  /regencies:
    get:
      tags: [Location]
      summary: Semua kabupaten/kota
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Regency' }
  /provinces/{id}/regencies:
    get:
      tags: [Location]
      summary: Kabupaten/kota per provinsi
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Regency' }

  /report:
    post:
      tags: [Report]
      summary: Tambah laporan baru (upload 1 foto)
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ReportCreateInput' }
      responses:
        '201': { description: Dibuat, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '422': { description: Invalid payload }

  /report/{reportId}/progress:
    post:
      tags: [Report]
      summary: Tambah progres (upload 1 foto)
      security: [{ BearerAuth: [] }]
      parameters:
        - name: reportId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ReportProgressInput' }
      responses:
        '201': { description: Dibuat, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '404': { description: Not Found }

  /report/province/{provinceId}:
    get:
      tags: [Report]
      summary: Laporan per provinsi
      parameters:
        - name: provinceId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '404': { description: Not Found }
