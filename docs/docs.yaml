openapi: 3.0.3
info:
  title: JagaKota API Documentation
  description: Jagakota API Documentation provides a comprehensive overview of the endpoints available for managing user authentication, geographic data, and user reports. This API allows users to register, login, and submit reports about urban issues, while also providing access to location data such as provinces and regencies in Indonesia.
  version: 1.1.0
servers:
  - url: /
    description: Development server

# Grouping endpoints
tags:
  - name: Auth
    description: Operasi yang berhubungan dengan autentikasi pengguna (Registrasi dan Login).
  - name: Location
    description: Operasi untuk mendapatkan data geografis seperti provinsi dan kabupaten.
  - name: Report
    description: Operasi yang berhubungan dengan laporan pengguna.

# Reusable components
components:
  # Security Schemes for authentication (JWT Bearer Token)
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reusable Schemas for request bodies and responses
  schemas:
    # --- Auth Schemas ---
    UserRegisterInput:
      type: object
      required:
        - username
        - firstName
        - email
        - password
        - street
        - latitude
        - longitude
        - provinceId
        - regencyId
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: "johndoe"
        firstName:
          type: string
          maxLength: 50
          example: "John"
        lastName:
          type: string
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: "Password harus mengandung setidaknya satu huruf besar, satu huruf kecil, dan satu angka."
          example: "Password123"
        street:
          type: string
          example: "Jl. Jenderal Sudirman No. 5"
        phoneNumber:
          type: string
          description: "Nomor telepon format Indonesia (e.g., 0812..., +62812..., 62812...)"
          example: "081234567890"
        latitude:
          type: number
          format: double
          example: -6.2087634
        longitude:
          type: number
          format: double
          example: 106.845599
        provinceId:
          type: integer
          example: 11
        regencyId:
          type: integer
          example: 1171

    UserLoginInput:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          description: "Bisa berupa username atau email."
          example: "johndoe"
        password:
          type: string
          format: password
          example: "Password123"

    LoginSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User Login Successful"
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RegisterSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User Registration Successful"
        data:
          type: string
          example: "User registered successfully."

    # --- Location Schemas ---
    Province:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: "ACEH"
    Regency:
      type: object
      properties:
        id:
          type: integer
          example: 1101
        province_id:
          type: integer
          example: 11
        name:
          type: string
          example: "KABUPATEN SIMEULUE"

    # --- Report Schemas ---
    ReportInput:
      type: object
      required:
        - title
        - description
        - latitude
        - longitude
        - street
        - provinceId
        - regencyId
        - photo
      properties:
        title:
          type: string
          example: "Jalan Rusak di Depan Balai Kota"
        description:
          type: string
          example: "Terdapat lubang besar yang membahayakan pengendara."
        latitude:
          type: number
          format: double
          example: -6.2087634
        longitude:
          type: number
          format: double
          example: 106.845599
        street:
          type: string
          example: "Jl. Medan Merdeka Sel. No.8-9, Gambir"
        provinceId:
          type: integer
          example: 11
        regencyId:
          type: integer
          example: 1171
        photo:
          type: string
          format: binary
          description: Image file of the report location.

    VerifyReportInput:
      type: object
      required:
        - verificationStatus
      properties:
        verificationStatus:
          type: string
          enum: [PENDING, VERIFIED, REJECTED]
          example: VERIFIED
        verificationNotes:
          type: string
          example: "Laporan telah divalidasi oleh tim lapangan."

    ReportProgressInput:
      type: object
      required:
        - progressNotes
        - image
      properties:
        progressNotes:
          type: string
          example: "Pekerjaan perbaikan telah dimulai."
        stage:
          type: string
          enum: [REVIEW, INPROGRESS, COMPLETED]
          default: REVIEW
          example: INPROGRESS
        image:
          type: string
          format: binary
          description: Image file showing the progress.

    Address:
      type: object
      properties:
        street:
          type: string
          example: "Jl. Gatot Subroto Kav. 52-53"
        latitude:
          type: number
          example: -6.2293867
        longitude:
          type: number
          example: 106.8093555
        province_id:
          type: integer
          example: 11
        regency_id:
          type: integer
          example: 1174

    ReportResponse:
      type: object
      properties:
        report_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Jalan Rusak"
        description:
          type: string
          example: "Deskripsi jalan rusak."
        address:
          $ref: "#/components/schemas/Address"

    NewReportResponse:
      type: object
      properties:
        report_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Jalan Rusak di Depan Balai Kota"
        author_id:
          type: string
          example: "user-abc-123"
        photoUrl:
          type: string
          format: uri
          example: "http://res.cloudinary.com/demo/image/upload/sample.jpg"

    # --- Generic Error Response ---
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "fail"
        message:
          type: string
        data:
          type: object
          properties:
            err:
              type: string
            data:
              type: "object"
              nullable: true
              example: null

# API Paths
paths:
  # --- Auth Paths ---
  /user/register:
    post:
      tags:
        - Auth
      summary: Registrasi Pengguna Baru
      description: Mendaftarkan pengguna baru ke dalam sistem.
      operationId: userRegister
      requestBody:
        description: Data yang diperlukan untuk registrasi.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterInput"
      responses:
        "200":
          description: Registrasi berhasil.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterSuccessResponse"
        "404":
          description: Gagal registrasi, biasanya karena email atau username sudah ada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                userExists:
                  value:
                    status: "fail"
                    message: "User Registration Failed"
                    data:
                      err: "Email is already in use."
        "422":
          description: Payload tidak valid atau tidak lengkap.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidPayload:
                  value:
                    status: "fail"
                    message: "Invalid Payload"
                    data:
                      err: "Username wajib diisi."
                invalidPassword:
                  value:
                    status: "fail"
                    message: "Invalid Payload"
                    data:
                      err: "Password harus mengandung setidaknya satu huruf besar, satu huruf kecil, dan satu angka."
        "500":
          description: Kesalahan Internal Server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user/login:
    post:
      tags:
        - Auth
      summary: Login Pengguna
      description: Mengautentikasi pengguna dan mengembalikan token JWT jika berhasil.
      operationId: userLogin
      requestBody:
        description: Kredensial pengguna untuk login.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginInput"
      responses:
        "200":
          description: Login berhasil, token JWT dikembalikan.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
        "401":
          description: Gagal autentikasi (password salah).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                wrongPassword:
                  value:
                    status: "fail"
                    message: "User Login Failed"
                    data:
                      err: "Incorrect password."
        "404":
          description: Pengguna tidak ditemukan.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                notFound:
                  value:
                    status: "fail"
                    message: "User Login Failed"
                    data:
                      err: "User not found."
        "422":
          description: Payload tidak valid atau tidak lengkap.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidPayload:
                  value:
                    status: "fail"
                    message: "Invalid Payload"
                    data:
                      err: "Harap isi Password"

  # --- Location Paths ---
  /provinces:
    get:
      tags:
        - Location
      summary: Dapatkan semua provinsi
      description: Mengambil daftar semua provinsi di Indonesia.
      operationId: getAllProvinces
      responses:
        "200":
          description: Berhasil mengambil daftar provinsi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Province"
  /regencies:
    get:
      tags:
        - Location
      summary: Dapatkan semua kabupaten/kota
      description: Mengambil daftar semua kabupaten/kota di Indonesia.
      operationId: getAllRegencies
      responses:
        "200":
          description: Berhasil mengambil daftar kabupaten/kota.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Regency"

  /provinces/{id}/regencies:
    get:
      tags:
        - Location
      summary: Dapatkan kabupaten/kota berdasarkan ID provinsi
      description: Mengambil daftar kabupaten/kota untuk provinsi tertentu.
      operationId: getRegenciesByProvincesId
      parameters:
        - name: id
          in: path
          required: true
          description: ID dari provinsi.
          schema:
            type: integer
      responses:
        "200":
          description: Berhasil mengambil daftar kabupaten/kota.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Regency"

  # --- Report Paths ---
  /report:
    get:
      tags:
        - Report
      summary: Dapatkan semua laporan
      description: Mengambil daftar semua laporan yang telah dikirim. Memerlukan autentikasi.
      operationId: getAllReport
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Berhasil mengambil semua laporan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportResponse"
        "404":
          description: Gagal mendapatkan laporan.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Report
      summary: Tambah laporan baru
      description: Membuat laporan baru dengan detail lokasi dan gambar. Memerlukan autentikasi.
      operationId: addReport
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ReportInput"
      responses:
        "201":
          description: Laporan berhasil dibuat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  data:
                    $ref: "#/components/schemas/NewReportResponse"
        "400":
          description: File gambar diperlukan.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Payload tidak valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidPayload:
                  value:
                    status: "fail"
                    message: "Invalid Payload"
                    data:
                      err: "Judul wajib diisi."

  /report/{reportId}/verify:
    patch:
      tags:
        - Report
      summary: Verifikasi atau tolak laporan
      description: Memperbarui status verifikasi dari laporan tertentu. Memerlukan autentikasi.
      operationId: verifyReport
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          description: ID dari laporan yang akan diverifikasi.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyReportInput"
      responses:
        "200":
          description: Verifikasi laporan berhasil diperbarui.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  data:
                    $ref: "#/components/schemas/NewReportResponse"
        "404":
          description: Gagal memverifikasi laporan (laporan tidak ditemukan).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Payload tidak valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidPayload:
                  value:
                    status: "fail"
                    message: "Invalid Payload"
                    data:
                      err: "Status verifikasi wajib diisi."

  /report/{provinceId}:
    get:
      tags:
        - Report
      summary: Dapatkan laporan berdasarkan provinsi
      description: Mengambil daftar semua laporan untuk provinsi tertentu. Memerlukan autentikasi.
      operationId: getAllReportsByProvince
      security:
        - BearerAuth: []
      parameters:
        - name: provinceId
          in: path
          required: true
          description: ID dari provinsi untuk filter laporan.
          schema:
            type: integer
      responses:
        "200":
          description: Berhasil mengambil laporan untuk provinsi tersebut.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportResponse"
        "404":
          description: Gagal mendapatkan laporan berdasarkan provinsi.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
